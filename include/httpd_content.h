// Generated with clasptree
// To use this file, define HTTPD_CONTENT_IMPLEMENTATION in exactly one translation unit (.c/.cpp file) before including this header.
#ifndef HTTPD_CONTENT_H
#define HTTPD_CONTENT_H


#define HTTPD_RESPONSE_HANDLER_COUNT 7
typedef struct { const char* path; const char* path_encoded; void (* handler) (void* arg); } httpd_response_handler_t;
extern httpd_response_handler_t httpd_response_handlers[HTTPD_RESPONSE_HANDLER_COUNT];
#ifdef __cplusplus
extern "C" {
#endif

// ./index.clasp
void httpd_content_index_clasp(void* resp_arg);
// ./api/index.clasp
void httpd_content_api_index_clasp(void* resp_arg);
// ./scripts/default.js
void httpd_content_scripts_default_js(void* resp_arg);
// ./styles/default.css
void httpd_content_styles_default_css(void* resp_arg);

#ifdef __cplusplus
}
#endif

#endif // HTTPD_CONTENT_H

#ifdef HTTPD_CONTENT_IMPLEMENTATION

httpd_response_handler_t httpd_response_handlers[7] = {
    { "/", "/", httpd_content_index_clasp },
    { "/api", "/api", httpd_content_api_index_clasp },
    { "/api/", "/api/", httpd_content_api_index_clasp },
    { "/api/index.clasp", "/api/index.clasp", httpd_content_api_index_clasp },
    { "/index.clasp", "/index.clasp", httpd_content_index_clasp },
    { "/scripts/default.js", "/scripts/default.js", httpd_content_scripts_default_js },
    { "/styles/default.css", "/styles/default.css", httpd_content_styles_default_css }
};
void httpd_content_index_clasp(void* resp_arg) {
    httpd_send_block("HTTP/1.1 200 OK\r\nTransfer-Encoding: chunked\r\nContent-Type: text"
        "/html\r\n\r\n18D\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta name=\"viewport\""
        " content=\"width=device-width, initial-scale=1.0\" />\r\n        <link rel=\"styleshe"
        "et\" type=\"text/css\" href=\"./styles/default.css\" />\r\n        <title>Alarm Control"
        " Panel</title>\r\n    </head>\r\n    <body>\r\n        <script src=\"./scripts/default."
        "js\"></script>\r\n        <h1>Alarm Control Panel</h1>\r\n        <form method=\"get\" "
        "action=\"#\">\r\n", 476, resp_arg);
    for(size_t i = 0;i<alarm_count;++i) {
                
    httpd_send_block("15\r\n\r\n            <label>\r\n", 27, resp_arg);
    httpd_send_expr((i+1), resp_arg);
    httpd_send_block("4A\r\n</label>\r\n            <label class=\"switch\">\r\n             "
        "   <input id=\"a\r\n", 80, resp_arg);
    httpd_send_expr(i, resp_arg);
    httpd_send_block("43\r\n\" type=\"checkbox\" onclick=\"refreshSwitches(true);\" name=\"a\""
        " value=\"\r\n", 73, resp_arg);
    httpd_send_expr(i, resp_arg);
    httpd_send_block("2\r\n\" \r\n", 7, resp_arg);
    if(alarm_values[i]){
    httpd_send_block("8\r\nchecked \r\n", 13, resp_arg);
    }
    httpd_send_block("5A\r\n/>\r\n                <span class=\"slider round\"></span>\r\n   "
        "         </label>\r\n            \r\n", 96, resp_arg);
    
    }
    httpd_send_block("10A\r\n\r\n            <br />\r\n            <button class=\"button\" o"
        "nclick=\"resetAll();\" type=\"button\">Reset All</button>\r\n        </form>\r\n        "
        "<script>\r\n            document.addEventListener(\"DOMContentLoaded\", refreshSwitc"
        "hes);\r\n        </script>\r\n    </body>\r\n</html>\r\n\r\n0\r\n\r\n", 278, resp_arg);
    free(resp_arg);
}
void httpd_content_api_index_clasp(void* resp_arg) {
    httpd_send_block("HTTP/1.1 200 OK\r\nTransfer-Encoding: chunked\r\nContent-Type: appl"
        "ication/json\r\n\r\nB\r\n{\"status\":[\r\n", 95, resp_arg);
    
    for(size_t i = 0;i<alarm_count;++i) {
        bool b=alarm_values[i];
        if(i==0) {
            if(b) {
                
    httpd_send_block("4\r\ntrue\r\n", 9, resp_arg);
    
            } else {
                
    httpd_send_block("5\r\nfalse\r\n", 10, resp_arg);
    
            }
        } else {
            if(b) {
                
    httpd_send_block("5\r\n,true\r\n", 10, resp_arg);
    
            } else {
                
    httpd_send_block("6\r\n,false\r\n", 11, resp_arg);
    
            }
        }
    }
    httpd_send_block("2\r\n]}\r\n0\r\n\r\n", 12, resp_arg);
    free(resp_arg);
}
void httpd_content_scripts_default_js(void* resp_arg) {
    // HTTP/1.1 200 OK
    // Content-Type: text/javascript
    // Content-Encoding: deflate
    // Content-Length: 444
    // 
    static const unsigned char http_response_data[] = {
        0x48, 0x54, 0x54, 0x50, 0x2F, 0x31, 0x2E, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4F, 0x4B, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 
        0x74, 0x65, 0x6E, 0x74, 0x2D, 0x54, 0x79, 0x70, 0x65, 0x3A, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2F, 0x6A, 0x61, 0x76, 0x61, 
        0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x45, 0x6E, 0x63, 0x6F, 
        0x64, 0x69, 0x6E, 0x67, 0x3A, 0x20, 0x64, 0x65, 0x66, 0x6C, 0x61, 0x74, 0x65, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 
        0x6E, 0x74, 0x2D, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x3A, 0x20, 0x34, 0x34, 0x34, 0x0D, 0x0A, 0x0D, 0x0A, 0xC4, 0x53, 
        0x3D, 0x4F, 0xC3, 0x30, 0x10, 0xDD, 0x91, 0xF8, 0x0F, 0xC6, 0x03, 0x72, 0x54, 0x94, 0x76, 0x61, 0x21, 0x04, 0x44, 0xA5, 
        0x0E, 0x65, 0x80, 0x01, 0x36, 0xC4, 0xE0, 0x3A, 0x97, 0xC6, 0xE0, 0x3A, 0x95, 0xED, 0x14, 0x21, 0xD4, 0xFF, 0xCE, 0xD9, 
        0x21, 0x69, 0x53, 0x8A, 0x28, 0x1F, 0x02, 0x0F, 0x89, 0x75, 0x7E, 0x77, 0xEF, 0xEE, 0xDD, 0xDD, 0x82, 0x1B, 0xE2, 0xE4, 
        0x0C, 0xCC, 0x38, 0x23, 0x29, 0xD1, 0x95, 0x52, 0xC9, 0xFE, 0x5E, 0x5E, 0x69, 0xE1, 0x64, 0xA9, 0x89, 0x01, 0x0B, 0xEE, 
        0x42, 0x29, 0x16, 0x91, 0x97, 0xFD, 0x3D, 0x82, 0x47, 0xE6, 0xEC, 0x80, 0xB5, 0x0E, 0xB5, 0x47, 0xD4, 0xBE, 0xFA, 0x23, 
        0x14, 0x70, 0x33, 0xD6, 0x0E, 0xCC, 0x82, 0xAB, 0x06, 0x1A, 0x25, 0x35, 0x60, 0x59, 0xFF, 0xEA, 0x6F, 0x0E, 0x4E, 0x14, 
        0x8C, 0xC6, 0x7D, 0x3E, 0x97, 0xE7, 0x48, 0x44, 0xA3, 0xDA, 0x1E, 0xBB, 0x02, 0x34, 0x43, 0xEE, 0x79, 0xA9, 0x2D, 0x90, 
        0xF4, 0x8C, 0x34, 0xF7, 0xF8, 0xC1, 0x96, 0x9A, 0x45, 0x1D, 0x1C, 0x57, 0xDC, 0xCC, 0xAC, 0x47, 0xAD, 0x25, 0x91, 0x97, 
        0x86, 0x2D, 0xB0, 0x34, 0x89, 0x45, 0x0D, 0x12, 0x79, 0x5A, 0x83, 0x62, 0xEB, 0xB8, 0xAB, 0x6C, 0xAC, 0x40, 0x4F, 0x5D, 
        0x91, 0xF4, 0x7A, 0xB2, 0x93, 0x79, 0xC8, 0x1E, 0x69, 0x1C, 0x91, 0x5E, 0x0C, 0xCA, 0x69, 0x4F, 0x26, 0xDB, 0x9E, 0xC5, 
        0x04, 0x9F, 0xB3, 0x52, 0x54, 0x33, 0xD0, 0x2E, 0x9E, 0x82, 0x1B, 0x29, 0xF0, 0xD7, 0xE1, 0xF3, 0x38, 0x63, 0xB2, 0x2D, 
        0xB6, 0x75, 0x9A, 0xC4, 0xA2, 0x00, 0xF1, 0x08, 0x3E, 0x6A, 0x27, 0x93, 0x3B, 0x79, 0xBF, 0x86, 0x7D, 0x13, 0x67, 0xD9, 
        0x94, 0x27, 0xB8, 0xD7, 0x07, 0x8C, 0x29, 0x8D, 0x2F, 0xCF, 0x73, 0x97, 0x0A, 0xE2, 0x60, 0x60, 0x74, 0x14, 0xEC, 0x41, 
        0x43, 0xA9, 0xA7, 0xE4, 0xF2, 0xE6, 0xFA, 0x8A, 0x64, 0xDC, 0xF1, 0x13, 0x7A, 0x44, 0x02, 0x24, 0x6A, 0xF2, 0x58, 0xF5, 
        0x17, 0x45, 0x6E, 0x3B, 0x63, 0x20, 0x47, 0x59, 0x8B, 0x9B, 0x27, 0x89, 0x11, 0xC0, 0x1E, 0x1D, 0x0F, 0x06, 0xDE, 0x61, 
        0xD9, 0x69, 0x7F, 0x07, 0xC2, 0x9E, 0x8C, 0x74, 0xD0, 0x4A, 0xE6, 0xF5, 0xAD, 0x8C, 0xF2, 0x4A, 0x85, 0x16, 0xF6, 0x69, 
        0xF2, 0x9B, 0x33, 0x82, 0x51, 0x02, 0x5F, 0x9A, 0x3A, 0x53, 0x41, 0xC7, 0x1D, 0x59, 0x7B, 0x29, 0x0D, 0x23, 0xB3, 0x32, 
        0xFA, 0x74, 0xC4, 0xC4, 0x6E, 0xEF, 0x8C, 0x1D, 0x3E, 0xDF, 0xF2, 0xE9, 0x15, 0x9F, 0x01, 0xA3, 0x52, 0xCF, 0x2B, 0x9C, 
        0xB5, 0xE4, 0xE3, 0x69, 0xC1, 0x30, 0x7F, 0x3D, 0x23, 0x58, 0xAD, 0x98, 0x1C, 0xA4, 0x95, 0xCE, 0x20, 0x97, 0x1A, 0xB2, 
        0x77, 0xA4, 0x2D, 0xA8, 0x99, 0xA5, 0xAD, 0x88, 0x56, 0x1D, 0x46, 0x0F, 0x79, 0x8A, 0xB9, 0x6D, 0xF2, 0x04, 0x81, 0x49, 
        0xD7, 0xB6, 0x7C, 0x3F, 0x82, 0xEB, 0x0B, 0x8A, 0xF1, 0xA2, 0x15, 0x62, 0xD7, 0xE5, 0xFC, 0x64, 0x41, 0x7F, 0xB4, 0xA4, 
        0x3B, 0x34, 0xE1, 0xDB, 0x8D, 0xF8, 0xCA, 0xC2, 0x6E, 0x8A, 0xB7, 0x5E, 0xFA, 0x7F, 0x2D, 0xEF, 0x2B, 0x00, 0x00, 0x00, 
        0xFF, 0xFF };
    httpd_send_block((const char*)http_response_data,sizeof(http_response_data), resp_arg);
    free(resp_arg);
}
void httpd_content_styles_default_css(void* resp_arg) {
    // HTTP/1.1 200 OK
    // Content-Type: text/css
    // Content-Encoding: deflate
    // Content-Length: 502
    // 
    static const unsigned char http_response_data[] = {
        0x48, 0x54, 0x54, 0x50, 0x2F, 0x31, 0x2E, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4F, 0x4B, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 
        0x74, 0x65, 0x6E, 0x74, 0x2D, 0x54, 0x79, 0x70, 0x65, 0x3A, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2F, 0x63, 0x73, 0x73, 0x0D, 
        0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3A, 0x20, 0x64, 
        0x65, 0x66, 0x6C, 0x61, 0x74, 0x65, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x4C, 0x65, 0x6E, 0x67, 
        0x74, 0x68, 0x3A, 0x20, 0x35, 0x30, 0x32, 0x0D, 0x0A, 0x0D, 0x0A, 0xA4, 0x54, 0x4D, 0x6F, 0xDB, 0x30, 0x0C, 0xBD, 0x17, 
        0xE8, 0x7F, 0x20, 0x3A, 0x0C, 0xD8, 0x32, 0x38, 0x71, 0xD2, 0x34, 0xC0, 0xDC, 0xFB, 0xD0, 0xC3, 0x76, 0x19, 0x72, 0xD8, 
        0x55, 0x96, 0x68, 0x5B, 0xB0, 0x22, 0x19, 0x92, 0x3C, 0x7B, 0x1B, 0xF6, 0xDF, 0x27, 0xF9, 0x23, 0xFE, 0x6C, 0x3B, 0xA0, 
        0x0E, 0x6C, 0x84, 0xA4, 0x44, 0xBE, 0x47, 0x3D, 0x6A, 0xB7, 0x81, 0x73, 0x86, 0x60, 0x2A, 0x6E, 0x69, 0x06, 0x01, 0x58, 
        0x67, 0xC4, 0xAA, 0x06, 0xA2, 0x55, 0x29, 0x59, 0x63, 0x1A, 0xC1, 0x19, 0x6A, 0xD8, 0xEC, 0x6E, 0x6F, 0xB6, 0xDD, 0xBA, 
        0x3F, 0xB7, 0x37, 0xE0, 0x9E, 0x42, 0x19, 0x6E, 0xB9, 0x92, 0x11, 0x68, 0x14, 0xC4, 0xF2, 0x9F, 0xF8, 0xD8, 0x06, 0x18, 
        0x37, 0x85, 0x20, 0xBF, 0x22, 0xE0, 0x52, 0x70, 0x89, 0x41, 0x2C, 0x14, 0xCD, 0xBB, 0x58, 0xC5, 0x99, 0xCD, 0x22, 0x38, 
        0x85, 0x45, 0xDD, 0x79, 0x32, 0xE4, 0x69, 0x66, 0x23, 0xB8, 0x3F, 0x76, 0xAE, 0xBF, 0xFE, 0xE3, 0xDF, 0xDD, 0x06, 0x9E, 
        0x5C, 0x71, 0x60, 0x98, 0x90, 0x52, 0x58, 0x78, 0x3A, 0x7F, 0xFB, 0x0A, 0x34, 0x43, 0x9A, 0x7B, 0x8C, 0x1E, 0x11, 0x40, 
        0x8F, 0x89, 0xCB, 0xA2, 0xB4, 0x3D, 0x32, 0x55, 0x10, 0xCA, 0xAD, 0x03, 0x10, 0x4E, 0xAB, 0x86, 0xB3, 0x92, 0xE1, 0xA2, 
        0xDE, 0x79, 0xCA, 0xD8, 0xE7, 0x6F, 0xAD, 0x05, 0x67, 0x12, 0x1B, 0x25, 0x4A, 0xDB, 0x73, 0xA6, 0xA5, 0x36, 0x4A, 0x47, 
        0x6E, 0x01, 0x97, 0x16, 0x75, 0xE7, 0xB5, 0xAA, 0x18, 0xAA, 0x0A, 0x4C, 0xEC, 0x60, 0xE9, 0x31, 0x04, 0x70, 0x5D, 0xB7, 
        0x56, 0x5D, 0x46, 0x36, 0xA1, 0x79, 0xDA, 0x9C, 0x42, 0x40, 0x95, 0xF0, 0x99, 0xDF, 0x51, 0x4A, 0xBB, 0x60, 0x50, 0x61, 
        0x9C, 0x73, 0x1B, 0x58, 0x4D, 0x64, 0x8F, 0x67, 0x7B, 0x34, 0x7D, 0xD1, 0x15, 0xEF, 0x95, 0x63, 0xC7, 0x27, 0x8A, 0x31, 
        0x51, 0x1A, 0x5F, 0xA7, 0xA5, 0x1C, 0x1B, 0xE9, 0x70, 0xDE, 0xDD, 0xCD, 0x7A, 0x77, 0x38, 0x5D, 0x4F, 0xB0, 0xEB, 0xEE, 
        0xC8, 0xD3, 0x52, 0x3D, 0x5E, 0xED, 0x9E, 0xDD, 0xC8, 0xB3, 0xE0, 0x57, 0x65, 0xFC, 0x5A, 0xF6, 0x0D, 0x04, 0x1B, 0x21, 
        0x44, 0x8D, 0x4A, 0x90, 0xC1, 0xA7, 0xF9, 0x01, 0xAE, 0xF4, 0xF5, 0xB0, 0xFF, 0x7C, 0xFA, 0x72, 0xBF, 0x96, 0x25, 0x51, 
        0xB4, 0x34, 0x2B, 0x39, 0x54, 0x1D, 0x98, 0x8C, 0x30, 0x55, 0xB9, 0xF3, 0x72, 0xBF, 0x7D, 0x51, 0xBF, 0x94, 0x65, 0x81, 
        0x65, 0xD6, 0xFC, 0x09, 0x59, 0x17, 0x70, 0x7D, 0x6A, 0xFE, 0xBA, 0x99, 0xC2, 0x1F, 0x1F, 0x7C, 0x57, 0x3F, 0xF6, 0x6D, 
        0xB9, 0x98, 0xFF, 0x58, 0xF5, 0xDA, 0x8A, 0xB1, 0xDE, 0xBF, 0xFB, 0x4E, 0x38, 0x6C, 0x2D, 0x30, 0x33, 0x15, 0xFD, 0xB6, 
        0xBD, 0x05, 0xAE, 0xAC, 0xB5, 0xF3, 0x05, 0x9A, 0x30, 0x5E, 0x9A, 0xB5, 0x71, 0x9D, 0xEC, 0x9A, 0x71, 0x9C, 0x6D, 0x7E, 
        0x08, 0xDF, 0xF7, 0x7B, 0x9B, 0x9D, 0x71, 0xE9, 0xF4, 0x21, 0x9F, 0x3F, 0x23, 0x46, 0x74, 0xAE, 0x91, 0x3D, 0xAE, 0x26, 
        0xDB, 0x1F, 0x46, 0x3A, 0xF3, 0x91, 0x08, 0xA4, 0x92, 0x83, 0x82, 0x17, 0xEA, 0x2A, 0x08, 0x63, 0x5C, 0xA6, 0x4E, 0xB1, 
        0xC3, 0x2D, 0x64, 0xB1, 0xB6, 0x01, 0x11, 0x3C, 0x75, 0x9A, 0xA2, 0x38, 0x1E, 0x61, 0x1F, 0x60, 0x48, 0x95, 0x26, 0xAD, 
        0xE2, 0x46, 0xB9, 0x5F, 0xBA, 0xE8, 0x12, 0x37, 0x39, 0x81, 0xE1, 0xBF, 0xD1, 0x01, 0x1C, 0x06, 0xE3, 0x42, 0x74, 0xCA, 
        0x65, 0x33, 0x08, 0x70, 0x18, 0x37, 0xF0, 0x1F, 0x00, 0x00, 0x00, 0xFF, 0xFF };
    httpd_send_block((const char*)http_response_data,sizeof(http_response_data), resp_arg);
    free(resp_arg);
}
#endif // HTTPD_CONTENT_IMPLEMENTATION
